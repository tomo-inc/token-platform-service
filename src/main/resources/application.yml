spring:
  kafka:
    bootstrap-servers: ${KAFKA_HOST}
    consumer:
      auto-offset-reset: earliest
      bootstrap-servers: ${KAFKA_HOST}
      group-id: token-group
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      acks: -1
      bootstrap-servers: ${KAFKA_HOST}
      properties:
        enable:
          idempotence: true
        max:
          in:
            flight:
              requests:
                per:
                  connection: 1
        retry:
          backoff:
            ms: 100
      retries: 3
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  datasource:
    url: jdbc:postgresql://${DB_HOST}/token_service?useSSL=false&serverTimezone=UTC&characterEncoding=utf8
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      database: 0
      timeout:  2000
      username: ${REDIS_USERNAME}
      password: ${REDIS_PASSORD}
      client-name: ${spring.application.name:token-platform-service}

mybatis:
  mapper-locations: classpath:mappers/*.xml

## 监控
management:
  metrics:
    tags:
      application: ${spring.application.name:token-platform-service}
    distribution:
      percentiles:
        all: 0.5, 0.75, 0.9, 0.95, 0.99
  endpoints:
    web:
      exposure:
        include: prometheus,info,health


backend:
  client:
    url: https://apps-prod.unyx.tech

#grpc
grpc:
  client:
    host: ${GRPC_HOST}
    port: ${GRPC_PORT}